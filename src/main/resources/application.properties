# info
info.application.name=@project.artifactId@
info.application.version=@project.version@
info.application.description=@project.description@
info.properties.environment=azure

# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoints.jmx.exposure.include=health,info
management.info.env.enabled=true
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

pt.id_intermediario=${PAA_ID_INTERMEDIARIO}
pt.id_stazione=${PAA_STAZIONE_INT}

apiconfig.subscription-key=${APICONFIG_SUBSCRIPTION_KEY}
gpd.subscription-key=${GPD_SUBSCRIPTION_KEY}
gps.subscription-key=${GPS_SUBSCRIPTION_KEY}
config-cache.subscription-key=${CONFIG_CACHE_SUBSCRIPTION_KEY}

service.cache.host=${API_CONFIG_CACHE_HOST:https://api.dev.platform.pagopa.it/api-config-cache/p/v1}
service.gpd.host=${GPD_HOST}
service.gps.host=${GPS_HOST}
service.apiconfig.host=${API_CONFIG_HOST}

azure.tables.tableName=${AZURE_TABLES_TABLENAME}
azure.tables.connection.string=${AZURE_TABLES_CONNECTION_STRING}

# List of stations for which "Not Found" errors are ignored: response override with "OK".
# This value is typically set by an environment variable (e.g., SUPPRESSED_NOT_FOUND_ERRORS_STATIONS=15376371009_11).
# If the environment variable is not set, the list will be empty.
stations.SuppressedNotFoundErrors=${SUPPRESSED_NOT_FOUND_ERRORS_STATIONS:}

# logging level settings
logging.level.root=INFO
logging.level.it.gov.pagopa.payments=${LOGGING_LEVEL}


# feign
feign.client.config.default.loggerLevel=${FEIGN_LOG_LEVEL}
# timeout
feign.client.config.default.connect-timeout=${CONNECTION_TIMEOUT}
feign.client.config.default.read-timeout=${CONNECTION_TIMEOUT}

# retry configuration
retry.maxAttempts=${RETRY_MAX_ATTEMPTS}
retry.maxDelay=${RETRY_MAX_DELAY}
retry.multiplier=${RETRY_MULTIPLIER}

# cache configuration
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=${CACHE_SIZE}, expireAfterAccess=${CACHE_EXPIRATION_TIME}

xsd.generic-service=classpath:/xsd/general-service.xsd

# queue configuration
azure.queue.connection.string=${QUEUE_CONNECTION_STRING}
azure.queue.queueName=${QUEUE_NAME}
azure.queue.dequeue.limit=${DEQUEUE_LIMIT}
azure.queue.send.invisibilityTime=${QUEUE_SEND_INVISIBILITY_TIME}
azure.queue.receive.invisibilityTime=${QUEUE_RECEIVE_INVISIBILITY_TIME}

# cron configuration
cron.job.schedule.retry.enabled=${CRON_JOB_SCHEDULE_RETRY_ENABLED}
cron.job.schedule.expression.retry.trigger=${CRON_JOB_SCHEDULE_RETRY_TRIGGER}

# ========================================
# Spring Cloud Stream Kafka: cache EventHub Kafka Configuration
# ========================================
spring.cloud.function.definition=ConfigCacheEventConsumer
## Kafka Payment Options https://docs.spring.io/spring-cloud-stream/reference/spring-cloud-stream/binding-properties.html
spring.cloud.stream.bindings.input.contentType=application/json
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.destination=${KAFKA_CACHE_TOPIC:nodo-dei-pagamenti-cache}
# group Default: null (indicating an anonymous consumer)
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.group=${random.uuid}
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.content-type=${KAFKA_CACHE_CONTENT_TYPE:application/json}
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.binder=ConfigCacheEventConsumer
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.consumer.batch-mode=false
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.consumer.max-attempts=${KAFKA_MAX_ATTEMPTS:5}
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.consumer.back-off-initial-interval=${KAFKA_BACKOFF_INITIAL_INTERVAL:5}
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.consumer.back-off-max-interval=${KAFKA_BACKOFF_MAX_INTERVAL:1800}
spring.cloud.stream.bindings.ConfigCacheEventConsumer-in-0.consumer.back-off-multiplier=${KAFKA_BACKOFF_MULTIPLIER:2}

# https://github.com/spring-cloud/spring-cloud-stream/blob/main/docs/modules/ROOT/pages/kafka/kafka_overview.adoc#reset-offsets
spring.cloud.stream.kafka.default.consumer.resetOffsets=true
spring.cloud.stream.kafka.default.consumer.startOffset=latest

spring.cloud.stream.binders.ConfigCacheEventConsumer.type=kafka
spring.cloud.stream.binders.ConfigCacheEventConsumer.environment.spring.cloud.stream.kafka.binder.brokers= ${CONFIG_CACHE_EVENTHUB_NAME:pagopa-d-weu-core-evh-ns04}.servicebus.windows.net:9093
spring.cloud.stream.binders.ConfigCacheEventConsumer.environment.spring.cloud.stream.kafka.binder.configuration.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="${CONFIG_CACHE_EVENTHUB_CONN_STRING}";
spring.cloud.stream.binders.ConfigCacheEventConsumer.environment.spring.cloud.stream.kafka.binder.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.binders.ConfigCacheEventConsumer.environment.spring.cloud.stream.kafka.binder.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

## Kafka misc
spring.cloud.stream.kafka.binder.auto-create-topics=false
spring.cloud.stream.kafka.binder.configuration.heartbeat.interval.ms=${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
spring.cloud.stream.kafka.binder.configuration.session.timeout.ms=${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
spring.cloud.stream.kafka.binder.configuration.request.timeout.ms=${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
spring.cloud.stream.kafka.binder.configuration.sasl.mechanism=${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
spring.cloud.stream.kafka.binder.configuration.security.protocol=${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
spring.cloud.stream.kafka.binder.configuration.connections.max.idle.ms=${KAFKA_CONFIG_CONNECTION_MAX_IDLE_TIME:180000}
spring.cloud.stream.kafka.binder.configuration.metadata.max.idle.ms=${KAFKA_CONFIG_METADATA_MAX_IDLE_MS:180000}
spring.cloud.stream.kafka.binder.configuration.metadata.max.age.ms=${KAFKA_CONFIG_METADATA_MAX_AGE_INTERVAL:179000}
spring.cloud.stream.kafka.binder.configuration.max.request.size=${KAFKA_CONFIG_MAX_REQUEST_SIZE:1000000}